package algorithm;

/**
 * Created by zrq on 2019-5-25.
 */
public class CanWinNim {
    /**
     * Nim 游戏
     *
     * 你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。
     * 拿掉最后一块石头的人就是获胜者。你作为先手。
     * 你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。
     * <p>
     * 示例:
     * 输入: 4
     * 输出: false
     * 解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；
     * 因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。
     *
     * @param args
     */
    public static void main(String[] args) {
        int n = 4;
        canWinNim(n);
    }

    /**
     * 巴什博弈:https://baike.baidu.com/item/%E5%B7%B4%E4%BB%80%E5%8D%9A%E5%BC%88/1819345?fr=aladdin
     * @param n
     * @return
     */
    public static boolean canWinNim(int n) {
        /** 要从最简单的情况开始推理:
         * 1-3 的情况明显都是先手赢
         * 4 的情况,先手无论怎么拿,剩下的子数都是小于等于 3 的,也就是先手必输
         * 5 先手只需让对手处于"4"子的情况(也就是必输的数字),自己就赢了
         * 6 同理
         * 7 同理
         * 到 8 就不行了,想要让对手处在"必输数字",却发现自己"鞭长莫及",看来 8 又是一个"必输数字"
         * 继续往下,显然可知，只要自己在 3 步内,让对手处在"必输数字"上,自己必赢,
         * 看来每次都是 3 步为一个必赢区间,加上必赢数字,也就是 4 是一个周期
         */
        return n % 4 != 0;
    }
}
