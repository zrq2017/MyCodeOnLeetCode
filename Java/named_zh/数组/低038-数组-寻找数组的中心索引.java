/**
寻找数组的中心索引

给定一个整数类型的数组 nums，请编写一个能够返回数组“中心索引”的方法。

我们是这样定义数组中心索引的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。

如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。

示例 1:

输入: 
nums = [1, 7, 3, 6, 5, 6]
输出: 3
解释: 
索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。
同时, 3 也是第一个符合要求的中心索引。
示例 2:

输入: 
nums = [1, 2, 3]
输出: -1
解释: 
数组中不存在满足此条件的中心索引。
说明:

nums 的长度范围为 [0, 10000]。
任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。

**/
class Solution {
	//方法一：算出所有数的总和之后，直接从左边开始加什么时候等于总和的一半为止，如果没找到就返回-1；
    public int pivotIndex1(int[] nums) {
        if(nums.length < 2)
            return -1;
        int leftSum = 0;
        int rightSum = 0;
        int sum = 0;
        for(int n:nums){
            sum += n;
        }
        int i;
        for(i=0;i<nums.length;i++){
            if(i==0)
                leftSum = 0;
            else
                leftSum += nums[i-1];
            rightSum = sum - leftSum - nums[i];
            if(leftSum == rightSum)
                return i;
        }
        return -1;
    }
	/**方法二
	双指针索引方法，一个从左边开始加，一个从右边开始加，如果左边和大于右边和就右边指针索引向左移动一下，
	否则左边移动一下，直到两个指针相遇了，判断两边和相等不，如果相等就返回这个位置，如果不等就返回-1。
	但是有个细节要注意，就是有多个中心索引的情况，因此不能两边相等就停止，而应该是两指针相遇的时候才停止，
	并且右边的指针再相等的情况下应该优先动，这样才能保证是最左边的中心索引。
	**/
	/**public int pivotIndex2(int[] nums) {
        int i=0,j=nums.length-1;
        int left=0,right=0;
        while(i<j){
            if(left>right){
                right+=nums[j--];
                System.out.println(nums[j]);
            }else if(left<right){
                left+=nums[i++];
                System.out.println(nums[i]);
            }else{
                if(i==j){
                    return i;
                }
                right+=nums[j--];
            }
        }
        return i;
    }**/
}