/**
买卖股票的最佳时机

给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

推荐方法一：2ms(方法二3ms)
**/
class Solution {
	//方法一：与方法二思想同
	public int maxProfit1(int[] prices) {
       if (prices.length == 0) return 0;
        int temp = 0;
        int max = 0;
        for(int i=1;i < prices.length;i++) {
			//今天减去昨天的收益+昨天的收益等于总体收益
            temp = (prices[i] + temp - prices[i-1]) > 0 ? (prices[i] + temp - prices[i-1]) : 0;
            max = max < temp ? temp : max;
        }
        return max; 
    }
	//方法二
    public int maxProfit2(int[] prices) {
        /**
        max保存最大收益, profit保存第i天之前的收益
        如果第i天前的profit加上第i天的收益小于0则表
        示前i天收益为负那么无论后面收益有多高都该直接
        舍弃这部分负收益
        **/
        int max = 0, profit = 0;
        for(int i = 1; i < prices.length; ++i) {
            profit += prices[i] - prices[i-1];
            if(profit < 0)
                profit = 0;
            else
                max = Math.max(max, profit);
        }
        return max;
    }
}
/**
1、什么是动态规划？ 
这里参考百度百科，动态规划是求解决策过程最优化的数学方法。把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。

2、什么时候要用动态规划？ 
如果要求一个问题的最优解（通常是最大值或者最小值），而且该问题能够分解成若干个子问题，并且小问题之间也存在重叠的子问题，则考虑采用动态规划。

3、怎么使用动态规划？ 
我把下面称为动态规划五部曲： 
1. 判题题意是否为找出一个问题的最优解 
2. 从上往下分析问题，大问题可以分解为子问题，子问题中还有更小的子问题 
3. 从下往上分析问题 ，找出这些问题之间的关联（状态转移方程） 
4. 讨论底层的边界问题 
5. 解决问题（通常使用数组进行迭代求出最优解）
**/