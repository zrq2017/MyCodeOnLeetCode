package algorithm.summary;

public class DungonGame {
    public static void main(String[] args) {
        /**
         * 地牢游戏（174）：从左上角到右下角，只能向右或向下走，每个格子有正负，初始的血量是多少？
         * 详细题目：
         * 一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。
         * 我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
         * 骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。
         * 有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；
         * 其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。
         * 为了尽快到达公主，骑士决定每次只向右或向下移动一步。
         * 编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。
         *
         * 例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。
         * -2 (K)	-3	3
         * -5	-10	1
         * 10	30	-5 (P)
         *  
         * 说明:
         * 骑士的健康点数没有上限。
         * 任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。
         */
//        int[][] mingo={
//                {9,-1,2,4,5},
//                {8,2,4,-5,8},
//                {6,-3,-5,4,-8},
//                {2,6,7,8,-1},
//        };
        int[][] mingo={//输出7
                {-2,-3,3},
                {-5,-10,1},
                {10,30,-5}
        };
        int min=getMin(mingo);
        System.out.println(min);
    }

    //进入房间的血量经过PK后剩余出房间的血量
    private static int getMin(int[][] mingo) {
        if(mingo==null||mingo.length==0) return 0;
        int r=mingo.length,c=mingo[0].length;
        int[][] dp=new int[r+1][c+1];//多一列是为了好计算，赋值Max是因为根本不会去多出来的一列，赋值那两个特殊格子为1，是会出来的房间
        for(int i=0;i<r;i++){
            dp[i][c]=Integer.MAX_VALUE;
        }
        for(int i=0;i<c;i++){
            dp[r][i]=Integer.MAX_VALUE;
        }
        dp[r][c-1]=dp[r-1][c]=1;//出来都是最低血量，In+V=Out(进入i,j房间的初始血量In经过这个房间PK的V值后剩余的血量为Out，取两个方向最小的)
        for(int i=r-1;i>=0;i--){
            for(int j=c-1;j>=0;j--){
                /**
                 * 1）内层的min表示两个方向求进入房间的最小血量
                 * 2）外层max代表由内层推出的进入房间的初始血量可以为负值（就是这个格子将会大幅度加血满足后面需求）
                 * 但是不可能是负值血量进入的房间，所以只能取最小进入房间的血量值1
                 */
                dp[i][j]=Math.max(1,Math.min(dp[i+1][j],dp[i][j+1])-mingo[i][j]);
            }
        }
        return dp[0][0];
    }
}
